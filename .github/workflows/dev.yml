name: Build and Test

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, main, feature/*]
  pull_request:
    branches: [ master, main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Set an environment variable for the workflow
env:
  UV_HTTP_TIMEOUT: 300
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
  sdist-n-tests:
    strategy:
      fail-fast: true
      matrix:
        python-versions: ["3.7"]
    name: sdist and tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install UV
        uses: astral-sh/setup-uv@v4

      - name: Set up Python ${{ matrix.python-versions }}
        run: uv python install ${{ matrix.python-versions }}

      - name: Install the project
        run: uv sync --all-extras --dev

      # Required for tox testing on mike
      - name: Setup doc deploy git user
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
        shell: bash

      - name: Get Python Info
        id: get-python-info
        run: |
          uv run python -c "import platform; print(f'{platform.python_version()}')" > python_info.txt
          ls -l $(readlink $(uv run which python))

      - name: Set python native lib path
        id: set-env-var
        run: |
          PYTHON_INFO=$(cat python_info.txt)
          FULL_PYTHON_LIB_PATH=$(eval echo $HOME/.local/share/uv/python/cpython-$PYTHON_INFO*/lib)
          echo "PYTHON_INFO=$PYTHON_INFO" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${FULL_PYTHON_LIB_PATH}:\$LD_LIBRARY_PATH" >> $GITHUB_ENV
        shell: bash

      - name: Display Python Info
        run: echo $PYTHON_INFO
        env:
          PYTHON_INFO: ${{ env.PYTHON_INFO }}

      - name: List Directory
        run: |
          ls -l /usr/bin/python
        env:
          PYTHON_INFO: ${{ env.PYTHON_INFO }}

      - name: Debug Environment Variables
        run: |
          echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
          echo "PYTHON_INFO: $PYTHON_INFO"
        env:
          LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}
          PYTHON_INFO: ${{ env.PYTHON_INFO }}

      - name: Show Library Paths
        run: |
          echo "Library paths:"
          ldconfig -v 2>/dev/null | grep -v ^$'\t'
        env:
          LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}

      - name: Check Python Library
        run: |
          ls -l $HOME/.local/share/uv/python/cpython-$PYTHON_INFO*/lib/libpython*.so
        env:
          PYTHON_INFO: ${{ env.PYTHON_INFO }}

      - name: Run tox
        run: uv run tox -e lint,doc

      - name: Build sdist
        run: uv build --sdist
        shell: bash

      - name: Integration test artifact
        run: |
          ls -l dist
          rm -rf .venv
          for pkg in dist/*; do
            uv venv
            uv pip install $pkg pytest pytest-random-order --force-reinstall
            .venv/bin/pytest -v py_integ -s
          done
        env:
          FUSION_CLIENT_ID: ${{ secrets.FUSION_CLIENT_ID }}
          FUSION_CLIENT_SECRET: ${{ secrets.FUSION_CLIENT_SECRET }}
        shell: bash

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-sdist-${{ matrix.python-versions }}
          path: dist/*.tar.gz

  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-versions: ["3.7"]
        platform:
          - target: "x86_64-unknown-linux-gnu"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-versions }}
      - name: Install UV
        run: pip install uv
      - name: Build wheels
        run: uv build --wheel
      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-linux-${{ matrix.platform.target }}-${{ matrix.python-versions }}
          path: dist/*.whl

  musllinux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-versions: ["3.7"]
        target: ["x86_64-unknown-linux-musl"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-versions }}
      - name: Install UV
        run: pip install uv
      - name: Build musllinux wheels
        run: |
          docker run --rm -v $(pwd):/io quay.io/pypa/musllinux_1_1_x86_64 python3.7 -m pip install --upgrade pip
          docker run --rm -v $(pwd):/io quay.io/pypa/musllinux_1_1_x86_64 python3.7 -m pip wheel -w dist .
      - name: Upload musllinux Wheels
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-musllinux-${{ matrix.target }}-${{ matrix.python-versions }}
          path: dist/*.whl

  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        python-versions: ["3.7"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-versions }}
      - name: Install UV
        uses: astral-sh/setup-uv@v4
      - name: Build wheels
        run: uv build --wheel
      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-windows-${{ matrix.python-versions }}
          path: dist/*.whl

  macos-build:
    runs-on: macos-13
    strategy:
      matrix:
        python-versions: ["3.7"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-versions }}
      - name: Install UV
        run: pip install uv
      - name: Build wheels
        run: uv build --wheel
      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-macos-${{ matrix.python-versions }}
          path: dist/*.whl
