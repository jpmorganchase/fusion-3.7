name: Build and Test

# Controls when the workflow will run
on:
  # Triggers the workflow on pushes to specific branches and PRs to `main`
  push:
    branches: [master, main, feature/*]
  pull_request:
    branches: [main]

  # Allows manual triggering from the GitHub Actions tab
  workflow_dispatch:

# Prevent duplicate runs by cancelling in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Set global environment variables
env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
  test-and-build:
    name: Build and Test for Python 3.7.9
    runs-on: ubuntu-22.04

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for versioning or tags if needed

      # Step 2: Install system dependencies for python 3.7.9
      - name: Install system dependencies for Python 3.7.9
        run: |
          sudo apt-get update
          sudo apt-get install -y tar build-essential checkinstall libreadline-dev \
            libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev \
            libbz2-dev openssl libffi-dev
      
      # Step 3: Set up Python 3.7.9
      - name: Build and Install Python 3.7.9 from source
        run: |
          mkdir -p $HOME/opt
          cd $HOME/opt
          curl -O https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz
          tar -xzf Python-3.7.9.tgz
          cd Python-3.7.9
          ./configure --enable-shared --enable-optimizations --prefix=/usr/local LDFLAGS="-Wl,--rpath=/usr/local/lib"
          sudo make altinstall
          python3.7 -V

      # Step 4: Install Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3.7 - --version 1.5.1
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/bin:$PATH"
          poetry --version

      # Step 5: Cache Poetry dependencies
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # Step 6: Install project dependencies
      - name: Install project dependencies
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry env use python3.7
          poetry install --all-extras --with dev

      # Step 7: Run linters using Tox
      - name: Run Linting
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry run tox -e lint

      # Step 8: Run tests using Tox
      - name: Run Tests
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry run tox -e test

      # Step 9: Build distribution artifacts using Poetry
      - name: Build Distribution
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry build

      # Step 9: Upload build artifacts for inspection or release
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts
          path: dist/
