name: Build and Test

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events, including feature branches.
  push:
    branches: [ master, main, feature/* ]
  pull_request:
    branches: [ master, main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Set environment variables for the workflow
env:
  UV_HTTP_TIMEOUT: 300
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  UV_SYSTEM_PYTHON: true

# Define the jobs that run in the workflow
jobs:
  sdist-n-tests:
    strategy:
      fail-fast: true
      matrix:
        python-versions: ["3.7"]
    name: sdist and tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Python 3.7
        run: |
          sudo apt-get update
          sudo apt-get install -y python3.7 python3.7-venv python3.7-dev
          python3.7 --version

      - name: Install UV
        run: pip install uv

      - name: Set up Python ${{ matrix.python-versions }}
        run: uv python install ${{ matrix.python-versions }}

      - name: Install the project
        run: uv sync --all-extras --dev

      # Setup git user for doc deployment
      - name: Setup doc deploy git user
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Run tox
        run: uv run tox -e lint,doc

      # Build and upload the source distribution
      - name: Build sdist
        run: uv build --sdist

      # Integration test artifacts
      - name: Integration test artifact
        run: |
          ls -l dist
          rm -rf .venv
          for pkg in dist/*; do
            uv venv
            uv pip install $pkg pytest pytest-random-order --force-reinstall
            .venv/bin/pytest -v py_integ -s
          done
        env:
          FUSION_CLIENT_ID: ${{ secrets.FUSION_CLIENT_ID }}
          FUSION_CLIENT_SECRET: ${{ secrets.FUSION_CLIENT_SECRET }}

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-sdist-${{ matrix.python-versions }}
          path: dist/*.tar.gz

  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-versions: ["3.7"]
        platform:
          - target: "x86_64-unknown-linux-gnu"
    steps:
      - uses: actions/checkout@v4

      # Install Python 3.7 using deadsnakes PPA
      - name: Install Python 3.7
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository ppa:deadsnakes/ppa -y
          sudo apt-get update
          sudo apt-get install -y python3.7 python3.7-venv python3.7-dev
          curl -sS https://bootstrap.pypa.io/pip/3.7/get-pip.py | sudo python3.7
          python3.7 --version
          python3.7 -m pip --version

      # Install UV explicitly and resolve dependencies for Python 3.7
      - name: Install UV and resolve for Python 3.7
        run: |
          python3.7 -m pip install uv
          uv sync --python-version 3.7 --all-extras --dev

      # Build wheels using UV
      - name: Build wheels
        run: uv build --wheel
        env:
          LD_LIBRARY_PATH: /usr/local/lib:$LD_LIBRARY_PATH

      # Integration test artifacts
      - name: Integration test artifact
        run: |
          for pkg in dist/*; do
            uv venv .integ
            VIRTUAL_ENV=.integ uv pip install $pkg pytest pytest-random-order --force-reinstall
            .integ/bin/pytest -v py_integ -s
          done
        env:
          FUSION_CLIENT_ID: ${{ secrets.FUSION_CLIENT_ID }}
          FUSION_CLIENT_SECRET: ${{ secrets.FUSION_CLIENT_SECRET }}

      # Upload built wheels as artifacts
      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-linux-${{ matrix.platform.target }}-${{ matrix.python-versions }}
          path: dist/*.whl



  musllinux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-versions: ["3.7"]
        target: ["x86_64-unknown-linux-musl"]
    steps:
      - uses: actions/checkout@v4

      - name: Install Python 3.7
        run: |
          sudo apt-get update
          sudo apt-get install -y python3.7 python3.7-venv python3.7-dev
          python3.7 --version

      - name: Install UV
        run: pip install uv

      - name: Build musllinux wheels
        run: |
          docker run --rm -v $(pwd):/io quay.io/pypa/musllinux_1_1_x86_64 python3.7 -m pip install --upgrade pip
          docker run --rm -v $(pwd):/io quay.io/pypa/musllinux_1_1_x86_64 python3.7 -m pip wheel -w dist .

      # Integration test artifacts
      - name: Integration test artifact
        run: |
          for pkg in dist/*; do
            uv venv .integ
            VIRTUAL_ENV=.integ uv pip install $pkg pytest pytest-random-order --force-reinstall
            .integ/bin/pytest -v py_integ -s
          done
        env:
          FUSION_CLIENT_ID: ${{ secrets.FUSION_CLIENT_ID }}
          FUSION_CLIENT_SECRET: ${{ secrets.FUSION_CLIENT_SECRET }}

      - name: Upload musllinux Wheels
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-musllinux-${{ matrix.target }}-${{ matrix.python-versions }}
          path: dist/*.whl

  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        python-versions: ["3.7"]
    steps:
      - uses: actions/checkout@v4
      - name: Install UV
        uses: astral-sh/setup-uv@v4
      - name: Build wheels
        run: uv build --wheel
      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-windows-${{ matrix.python-versions }}
          path: dist/*.whl

  macos-build:
    runs-on: macos-13
    strategy:
      matrix:
        python-versions: ["3.7"]
    steps:
      - uses: actions/checkout@v4
      - name: Install Python 3.7
        run: brew install [emailÂ protected]
      - name: Install UV
        run: pip3 install uv
      - name: Build wheels
        run: uv build --wheel
      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-macos-${{ matrix.python-versions }}
          path: dist/*.whl
